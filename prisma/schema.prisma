generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  emailVerified DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  password      String?
  accounts      Account[]
  Authenticator Authenticator[]
  CV            CV[]
  sessions      Session[]
  Profile       Profile?
}

model Profile {
  id        String   @id @default(cuid())
  name      String?
  position  String?
  image     String?
  phone     String?
  address   String?
  linkedin  String?
  github    String?
  portfolio String?
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model CV {
  id             String   @id @default(cuid())
  userId         String
  fullName       String
  email          String
  phoneNumber    String
  birthDay       DateTime
  nationality    String
  maritalStatus  String
  gender         String
  address        String   @db.Text
  linkedInURL    String
  portfolioURL   String
  summary        String
  skills         String[] @default([])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  experiences    Json[]   @default([])
  educations     Json[]   @default([])
  certifications Json[]   @default([])
  languages      Json[]   @default([])
  projects       Json[]   @default([])
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
